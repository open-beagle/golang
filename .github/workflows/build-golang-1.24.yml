name: Build Golang 1.24 Images

on:
  push:
    branches:
      - release-1.24
  workflow_dispatch: # 允许手动触发

env:
  REGISTRY_ALIYUN: registry.cn-qingdao.aliyuncs.com
  GOLANG_VERSION: 1.24.4
  GOLANG_MAJOR_VERSION: 1.24
  XX_VERSION: 1.6.1

jobs:
  build-alpine:
    name: Build Alpine Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Aliyun Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_ALIYUN }}
          username: ${{ secrets.REGISTRY_USER_ALIYUN }}
          password: ${{ secrets.REGISTRY_PASSWORD_ALIYUN }}

      - name: Build and push Alpine images for amd64
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .beagle/alpine.dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_VERSION }}-alpine-amd64
            ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_MAJOR_VERSION }}-alpine-amd64
          build-args: |
            BASE=golang:${{ env.GOLANG_VERSION }}-alpine3.22
            XXBASE=tonistiigi/xx:${{ env.XX_VERSION }}
          provenance: false
          sbom: false

      - name: Build and push Alpine images for arm64
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .beagle/alpine.dockerfile
          push: true
          platforms: linux/arm64
          tags: |
            ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_VERSION }}-alpine-arm64
            ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_MAJOR_VERSION }}-alpine-arm64
          build-args: |
            BASE=golang:${{ env.GOLANG_VERSION }}-alpine3.22
            XXBASE=tonistiigi/xx:${{ env.XX_VERSION }}
          provenance: false
          sbom: false

      - name: Create and push multi-arch manifest for Alpine
        run: |
          # Create manifest for full version
          docker manifest create ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_VERSION }}-alpine \
            ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_VERSION }}-alpine-amd64 \
            ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_VERSION }}-alpine-arm64
          docker manifest push ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_VERSION }}-alpine

          # Create manifest for major version
          docker manifest create ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_MAJOR_VERSION }}-alpine \
            ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_VERSION }}-alpine-amd64 \
            ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_VERSION }}-alpine-arm64
          docker manifest push ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_MAJOR_VERSION }}-alpine

  build-bullseye:
    name: Build Bullseye Images
    needs: [build-alpine]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Aliyun Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_ALIYUN }}
          username: ${{ secrets.REGISTRY_USER_ALIYUN }}
          password: ${{ secrets.REGISTRY_PASSWORD_ALIYUN }}

      - name: Build and push Bullseye images for amd64
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .beagle/debian-arch.dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_VERSION }}-bullseye-amd64
            ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_MAJOR_VERSION }}-bullseye-amd64
          build-args: |
            BASE=golang:${{ env.GOLANG_VERSION }}-bullseye
            XXBASE=tonistiigi/xx:${{ env.XX_VERSION }}
          provenance: false
          sbom: false

      - name: Build and push Bullseye images for arm64
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .beagle/debian-arch.dockerfile
          push: true
          platforms: linux/arm64
          tags: |
            ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_VERSION }}-bullseye-arm64
            ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_MAJOR_VERSION }}-bullseye-arm64
          build-args: |
            BASE=golang:${{ env.GOLANG_VERSION }}-bullseye
            XXBASE=tonistiigi/xx:${{ env.XX_VERSION }}
          provenance: false
          sbom: false

      - name: Create and push multi-arch manifest for Bullseye
        run: |
          # Create manifest for full version
          docker manifest create ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_VERSION }}-bullseye \
            ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_VERSION }}-bullseye-amd64 \
            ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_VERSION }}-bullseye-arm64
          docker manifest push ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_VERSION }}-bullseye

          # Create manifest for major version
          docker manifest create ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_MAJOR_VERSION }}-bullseye \
            ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_VERSION }}-bullseye-amd64 \
            ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_VERSION }}-bullseye-arm64
          docker manifest push ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_MAJOR_VERSION }}-bullseye

  create-version-tags:
    name: Create Version Tags
    needs: [build-bullseye]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Aliyun Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_ALIYUN }}
          username: ${{ secrets.REGISTRY_USER_ALIYUN }}
          password: ${{ secrets.REGISTRY_PASSWORD_ALIYUN }}

      - name: Create and push version tags
        run: |
          # Create architecture specific tags
          docker pull ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_VERSION }}-bullseye-amd64
          docker tag ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_VERSION }}-bullseye-amd64 ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_MAJOR_VERSION }}-amd64
          docker push ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_MAJOR_VERSION }}-amd64

          docker pull ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_VERSION }}-bullseye-arm64
          docker tag ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_VERSION }}-bullseye-arm64 ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_MAJOR_VERSION }}-arm64
          docker push ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_MAJOR_VERSION }}-arm64

          # Create version tags for all architectures
          docker manifest create ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_MAJOR_VERSION }} \
            ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_VERSION }}-bullseye-amd64 \
            ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_VERSION }}-bullseye-arm64
          docker manifest push ${{ env.REGISTRY_ALIYUN }}/wod/golang:${{ env.GOLANG_MAJOR_VERSION }}
